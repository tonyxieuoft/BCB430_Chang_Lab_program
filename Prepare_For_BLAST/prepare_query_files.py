import os
from typing import Dict, List, Tuple

from Basic_Tools.taxonomy_browser import get_taxonomy_lineage
from Basic_Tools.lists_and_files import file_to_list, list_to_string
from Basic_Tools.basic_dictionaries import dict_get_values
from Prepare_For_BLAST.single_query_assembly import single_query_assembly
from Prepare_For_BLAST.taxa_assigner import get_assignments


def get_reference_species(ref_seq_path: str) -> Dict:
    """
    Given a ref_seq_path pointing to a folder of reference sequences, identifies
    the reference species present and organizes them by taxa

    :param ref_seq_path: a string path pointing to a folder of reference
    sequences generated by the NCBI_Exon_Puller package.
    :return: a dictionary where keys are taxa and values are reference species
    belonging to a taxon.
    """
    # species encountered so far. hashmap data structure for quick verification
    # that a species has already been encountered.
    encountered_species = {}
    # output dictionary
    taxon_to_species = {}
    # iterate through folder structure
    # gene level
    for gene_folder in os.listdir(ref_seq_path):
        gene_path =os.path.join(ref_seq_path, gene_folder)
        # taxon level
        for taxon_folder in os.listdir(gene_path):
            taxon_path = os.path.join(gene_path, taxon_folder)
            # species level
            for species_folder in os.listdir(taxon_path):
                # if we haven't already added the species to the output
                if species_folder not in encountered_species:
                    encountered_species[species_folder] = True
                    # if the taxon of the species is already in the output,
                    # just append
                    if taxon_folder in taxon_to_species:
                        taxon_to_species[taxon_folder].append(species_folder)
                    else:
                        # otherwise, create a new key
                        taxon_to_species[taxon_folder] = [species_folder]

    return taxon_to_species


def get_lineage_dict_and_taxid_codes(taxa_to_species_dict: Dict) -> [Dict, Dict]:
    """
    Given the reference species and associated taxa pulled out via the
    NCBI_Exon_Puller package, find lineages/taxids for each of them.

    :param taxa_to_species_dict: a dictionary, where keys are taxa and values
    are reference species within that taxa
    :return:
    """
    # get a list of all taxa present among reference species
    taxa_list = list(taxa_to_species_dict.keys())
    # get a list of all reference_species present
    species_list = dict_get_values(taxa_to_species_dict)

    # a list of taxa/species to lookup lineages for
    # ideally, only call get_taxonomy_lineage once, because it takes time to
    # contact the website
    species_string = list_to_string(taxa_list + species_list, "\n")
    print("contacting the NCBI taxonomy API...")
    lineage_dict = get_taxonomy_lineage(species_string)

    # a dictionary where keys are taxa and values are taxids corresponding to
    # the taxa
    taxid_codes = {}
    lineage_keys = list(lineage_dict.keys())
    # remove taxa from the results, we want lineage_dict to just have species
    for key in lineage_keys:
        if key in taxa_list: # slightly inefficient, O(T), but T is pretty short
            taxid_codes[key] = lineage_dict[key][0]
            # only pop if it's not a species...
            if len(key.split()) == 1:
                lineage_dict.pop(key, None)

    return lineage_dict, taxid_codes


def prepare_query_files(auto_assign, auto_fill_in, ref_seq_path, save_path) \
        -> Tuple[List[str], List[str]]:
    """
    Prepare query files based on reference sequences pulled using the
    NCBI_Exon_Puller module.

    :param auto_assign: '1' for automatic delegation of sub-branches of an
    overhead taxon to reference species in the taxon. '0' for manual assignment.
    :param auto_fill_in: '1' for automatic pulling from the closest available
    species when a species is missing sequences for a gene. '0' for automatic
    filling.
    :param ref_seq_path: The directory containing reference sequences from the
    NCBI_Exon_Puller in the original folder hierarchy.
    :param save_path: A directory to save query files to.
    """
    # get a dictionary where the keys are taxa and values are reference species
    # corresponding to the taxa
    taxa_to_species_dict = get_reference_species(ref_seq_path)

    # get the lineage dictionary and taxids for the reference species
    lineage_dct, taxid_codes = get_lineage_dict_and_taxid_codes(taxa_to_species_dict)

    # get assignments for the reference species. this is based on the lineage
    # dictionary if automatic
    assignments = get_assignments(auto_assign, lineage_dct, taxid_codes,
                                  taxa_to_species_dict)

    # for each reference species -> sub-taxon assignment, make a query file for
    # it to use in BLAST. Sometimes, the reference species are missing sequences
    # for specific genes, and automatic/manual pulling from other available
    # species is offered.
    ordered_taxa_to_be_blasted = []
    complete_species = []
    for assignment in assignments:
        if single_query_assembly(auto_fill_in, assignment[0],
                                 assignment[1], ref_seq_path,
                                 save_path, lineage_dct):
            complete_species.append(assignment[0])
        ordered_taxa_to_be_blasted.append(assignment[1])

    return ordered_taxa_to_be_blasted, complete_species


if __name__ == "__main__":

    path = r"C:\Users\tonyx\Downloads\api_pull_complete_results8"
    save_path = r"C:\Users\tonyx\Downloads\test_taxa6"

    #if not os.path.isdir(save_path):
    #    os.mkdir(save_path)
    #print(prepare_query_files(1, 1, path, save_path))
    print(get_reference_species(r'C:\Users\tonyx\Downloads\NCBI_exon_pull_results (2)'))

